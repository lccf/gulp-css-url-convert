// Generated by LiveScript 1.4.0
var path, rework, reworkUrl, through, isDataUrl, isNetworkUrl, isRelative, isAbsolute, checkIgnore, urlMap, urlConvert, cssUrlConvert;
path = require('path');
rework = require('rework');
reworkUrl = require('rework-plugin-url');
through = require('through2');
/*
 * options
 *   root 根目录
 *   path 路径
 *   type 转换到relative相对路径，absolute约对路径，network网络路径
 *   map 从一个类型映射到另一个类型
 *   ignore 过滤
 *
 */
isDataUrl = function(url){
  return /^data:image/.exec(url);
};
isNetworkUrl = function(url){
  return /^http(?:s|):/.exec(url);
};
isRelative = function(url){
  return !/^\./.test(url) || !/^(http(?:s|):|data:|\/)/.test(url);
};
isAbsolute = function(url){
  return /^\//.exec(url);
};
checkIgnore = function(url, rules){
  var i$, len$, key, rule;
  if (!rules) {
    return false;
  }
  if (!Array.isArray(rules)) {
    rules = [].concat(rules);
  }
  for (i$ = 0, len$ = rules.length; i$ < len$; ++i$) {
    key = i$;
    rule = rules[i$];
    if (typeof rule === 'string') {
      if (url === rule) {
        return false;
      }
    }
    if (typeof rule === 'object' && rule !== null && rule.constructor === RegExp) {
      if (rule.match(url) !== null) {
        return false;
      }
    }
  }
};
urlMap = function(url, maps){
  var i$, len$, key, map, mapMatch;
  if (!Array.isArray(maps)) {
    maps = [].concat(maps);
  }
  for (i$ = 0, len$ = maps.length; i$ < len$; ++i$) {
    key = i$;
    map = maps[i$];
    mapMatch = new RegExp("^" + key);
    if (reg.text(url) !== null) {
      return url.replace(mapMatch, map);
    }
  }
};
urlConvert = function(file, options){
  var cssPath, cssContent;
  cssPath = path.dirname(file.path);
  cssContent = file.contents.toString();
  return rework(cssContent).use(reworkUrl(function(url){
    var baseName, urlPath, relativeUrlPath;
    if (isDataUrl(url)) {
      return url;
    }
    if (!isIgnore(url, options.ignore)) {
      return url;
    }
    if (options.map) {
      url = urlMap(url, options.map);
    }
    if (options.type === 'network' || isNetworkUrl(options.path)) {
      if (isNetworkUrl(url)) {
        return url;
      }
      options.path = options.path.replace(/\/$/, '');
      if (isRelative(url)) {
        baseName = path.basename(url);
        urlPath = path.resolve(cssPath, path.dirname(url));
        relativeUrlPath = path.relative(options.root, urlPath);
        return options.path + "/" + relativeUrlPath + "/" + baseName;
      } else if (isAbsolute(url)) {
        return url.replace(/^\//, options.path);
      }
    } else if (options.type === 'absolute' || isAbsolute(options.path)) {
      if (isAbsolute(url) || isNetworkUrl(url)) {
        return url;
      }
      if (isRelative(url)) {
        baseName = path.basename(url);
        urlPath = path.resolve(cssPath, path.dirname(url));
        relativeUrlPath = path.relative(options.root, urlPath);
        return options.path + "" + relativeUrlPath + "/" + baseName;
      }
    } else {
      return url;
    }
  })).toString();
};
cssUrlConvert = function(options){
  options || (options = {});
  return through.obj(function(file, enc, cb){
    var cssContent;
    cssContent = urlConvert(file, options);
    file.contents = new Buffer(cssContent);
    this.push(file);
    return cb();
  });
};
module.exports = cssUrlConvert;