// Generated by LiveScript 1.4.0
var path, rework, reworkUrl, through, isDataUrl, isNetworkUrl, isRelative, urlConvert, cssUrlConvert;
path = require('path');
rework = require('rework');
reworkUrl = require('rework-plugin-url');
through = require('through');
/*
 * options
 *   root 根目录
 *   convertTo 路径
 *   convertType 转换到relative相对路径，absolute约对路径，network网络路径
 *   match 匹配的类型
 *   ignore 过滤
 *
 */
isDataUrl = function(url){
  return /^data:image/.exec(url);
};
isNetworkUrl = function(url){
  return /^http(?:s|):/.exec(url);
};
isRelative = function(url){
  return !/^\./.test(url) || !/^(http(?:s|):|data:|\/)/.test(url);
};
urlConvert = function(file, options){
  var cssPath, cssContent;
  cssPath = path.dirname(file);
  cssContent = file.contents.toString();
  return rework(cssContent).use(reworkUrl(function(url){
    var baseName, urlPath, relativeUrlPath;
    if (isDataUrl(url)) {
      return url;
    }
    if (options.convertType === 'network') {
      baseName = path.basename(url);
      urlPath = path.resolve(cssPath, path.dirname(url));
      relativeUrlPath = path.relative(root, urlPath);
      return options.convertTo + "/" + relativeUrlPath + "/" + baseName;
    }
  }));
};
cssUrlConvert = function(options){
  options || (options = {});
  return through.obj(function(file, enc, cb){
    var cssContent;
    cssContent = urlConvert(file, options);
    file.contents = new Buffer(cssContent);
    this.push(file);
    return cb();
  });
};
module.exports = cssUrlConvert;